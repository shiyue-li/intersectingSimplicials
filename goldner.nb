# Author: Rob Silversmith

GoldnerAlgorithm[L_] := 
  If[Length[L] <= 1, 1, 
   Module[{pair1 = {L[[1, 1]], L[[1, 2]]}, 
     pair2 = {L[[1, 3]], L[[1, 4]]}, 
     rest = Complement[Union @@ L, L[[1]]], checker}, 
    Sum[GoldnerAlgorithm[
       Select[L, Length[Intersection[Union[S1, pair1], #]] >= 3 &] /. 
        Table[
         a -> Union[pair2, Complement[rest, S1]], {a, 
          Union[pair2, Complement[rest, S1]]}]] GoldnerAlgorithm[
       Select[L, 
         Length[Intersection[Union[Complement[rest, S1], pair2], #]] >=
            3 &] /. 
        Table[a -> Union[pair1, S1], {a, Union[pair1, S1]}]], {S1, 
      Select[Subsets[rest], Function[s, checker = True;
        Do[
         If[Length[Intersection[Union[s, pair1], L[[j]]]] == 2, 
          checker = False], {j, 2, Length[L]}];
        checker]]}]]];



GoldnerAlgorithm[{{1, 2, 3, 4}, {1, 2, 5, 6}, {3, 4, 5, 6}}]
